You must complete the public class named MyQueue.java with fields and methods as defined below!
Your MyQueue.java will implement the IQueue interface that is provided in the IQueue.java file. 
You must implement your MyQueue class as either a linked list or an array list (refer to your MyArrayList and MyLinkedList work). 
Your MyQueue must not be arbitrarily limited to any fixed size at run-time.

Structure of the Fields:

While there are no required fields for your MyQueue class, you will need to decide what fields to implement. 
This decision will be largely based on your choice to implement this MyQueue as either an array list or a linked list.

Structure of the Methods:

+ a public method named enqueue that takes an Object argument and returns nothing
+ a public method named dequeue that takes no arguments and returns an Object
+ a public method named peek that takes no arguments and returns an Object
+ a public method named indexOf that takes an Object argument and returns an int
+ a public method named getSize that takes no arguments and returns an int
+ a public method named isEmpty that takes no arguments and returns an boolean

Additional Information:

> MyQueue

1. This concrete class will store its elements in either an internal array list or linked list. 
   All such implementation details must be contained in your myQueue.java file. 
   You may add any additional fields, methods, and inner classes that you will need to achieve this.
2. enqueue method
   > Add a new item to end of the queue. 
     For example: given the queue{1, 2, 3} (where the value 1 is at the front and the value 3 is currently at the back) and an instruction to enqueue(99), 
     the result would be this {1, 2, 3, 99}, with the value 99 now at the end of the queue.
3. dequeue method
   > Remove and return the item currently at the front of the queue. 
     For example: given the queue {1, 2, 3} (where the value 1 is at the front and the value 3 is currently at the back) and an instruction to dequeue(), 
     the queue would now look like this {2, 3}, and the value 1 would be returned.
   > Throws a NoSuchElementException if the queue is currently empty when this method is called.
4. peek method
   > Return (but do not remove) the item currently at the front of the queue. 
     For example: given the queue {1, 2, 3} (where the value 1 is at the front and the value 3 is currently at the back) and an instruction to peek(), 
     the queue would still look like this {1, 2, 3}, and the value 1 would be returned.
   > Throws a NoSuchElementException if the queue is currently empty when this method is called.
5. indexOf method
   > Return the (zero-based) number of elements from the front or top of the collection where the specified item is first found. 
     Returns -1 if the item is not found in the collection. 
     For example: given the queue {1, 2, 3} (where the value 1 is at the front and the value 3 is currently at the back) and the instruction indexOf(2), 
     the value 1 would be returned (because the value 2 was found at index 1 (1 element after the front) in the queue . 
     For another example: given the queue {1, 2, 3} (where the value 1 is at the front and the value 3 is currently at the back) and the instruction indexOf(99), 
     the value -1 would be returned (because the value 99 is not found in the queue ).
6. getSize method
   > Returns the number of elements currently stored in the queue .
7. isEmpty method
   > Returns true if there are currently no items stored in this queue, otherwise returns false.
