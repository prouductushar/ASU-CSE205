For this assignment, you must complete the public class named MyArrayList with fields and methods as defined below. 
Your MyArrayList will implement the MyList interface that is provided in the myList.java file.

Your MyArrayList class must have the following fields:

- a private field named currentCapacity of type int, initialized to 8
- a private field named size of type int, initialized to 0
- a private field named storage of type Object[], initialized to an Object array of 8 elements

Structure of the Methods:

+ a public method named append that takes an Object argument and returns nothing
+ a public method named insertAt that takes an int argument and an Object argument and returns nothing
+ a public method named removeAt that takes an int arguments and returns nothing
+ a public method named getAt that takes an int argument and returns an Object
+ a public method named getSize that takes no arguments and returns an int
+ a public method named makeCapacity that takes an int argument and returns noting
+ a public method named trimExcess that takes no arguments and returns nothing

Additional Information:

> MyArrayList

1. This concrete class will store its elements in an array of Object. The initial capacity of this array will be 8 elements. 
   Since an array is a fixed size structure, you may need to allocate a new array with increased capacity in order to accommodate adding new elements. 
   For this purpose you must implement the makeCapacity method.
2. makeCapacity method
   > This method will take a minCapacity as an int argument.
   > If minCapacity is less than current size or equal to the currentCapacity, then this method should take no action.
   > Otherwise the capacity of this MyArrayList must be changed to either 8 or minCapacity (whichever is greater).
   > If currentCapacity is to be changed, then this method will allocate a new array of Object sized to the new capacity
     - Then copy over all elements from the old array to the new array
     - Then store the new array in the private storage variable for this instance
3. trimExcess method
   > This method will remove any excess capacity by simply calling the makeCapacity method with an argument value that is equal to the current size of this list.
4. append method
   > Appends new item to end of list. For example: given the list {1, 2, 3} and an instruction to append(99), the result would be this {1, 2, 3, 99}.
   > If the current size is equal to the current capacity, then this list is full to its current capacity, and capacity will need to be increased before we can append 
     the new element. To increase the capacity, call the makeCapacity method with an argument value that is twice the current capacity.
   > This method will add the new element to the list at the next available index in the array storage.
5. insertAt method
   > Makes a place at the specified index by moving all items at this index and beyond to the next larger index. 
     For example: given the list {1, 2, 3} and an instruction to insertAt(1, 99), the result would be this {1, 99, 2, 3}.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than size.
   > If the current size is equal to the current capacity, then this list is full to its current capacity, and capacity will need to be increased before we can insert 
     the new element. To increase the capacity, call the makeCapacity method with an argument value that is twice the current capacity.
6. removeAt method
   > Removes the element at the specified index and moves all elements beyond that index to the next lower index. 
     For example: given the list {1, 2, 3} and an instruction to removeAt(1), the result would be this {1, 3}.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than or equal to size.
7. getAt method
   > Returns the item at the specified index. For example: given the list {1, 2, 3} and an instruction to getAt(1), the return value would be 2.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than or equal to size.
8. getSize method
   > Returns the number of elements currently stored in the list.
