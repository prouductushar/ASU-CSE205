For this assignment, you must complete the public class named MyLinkedList with fields and methods as defined below. 
Your MyLinkedList will implement the MyList interface that is provided in the myList.java file.

Your MyLinkedList class must have the following fields:

- a private field named head of type Node, initialized to null
- a private field named size of type int, initialized to 0

Structure of the Methods:

+ a public method named append that takes an Object argument and returns nothing
+ a public method named insertAt that takes an int argument and an Object argument and returns nothing
+ a public method named removeAt that takes an int arguments and returns nothing
+ a public method named getAt that takes an int argument and returns an Object
+ a public method named getSize that takes no arguments and returns an int

Additional Information:

> MyLinekdList

1. This concrete class will store its elements in Node objects. 
   Each Node object has a data variable that stores the element and a next variable that stores a reference to the next Node object in the list. 
   Each instance of MyLinkedList has a Node variable called head. When size is 0 then head is null. 
   When size is not 0 then head is a reference to the first Node object. 
   For each Node object in the list, if this Node’s next is null then this is the last Node in the list.
2. append method
   > Appends new item to end of list. For example: given the list {1, 2, 3} and an instruction to append(99), the result would be this {1, 2, 3, 99}.
   > this method will construct a new Node object who’s data is the element to be added, and place this Node appropriately into the list.
3. insertAt method
   > Inserts a new Node at the specified index in the list. Given the list {1, 2, 3} and an instruction to insertAt(1, 99), the result would be this {1, 99, 2, 3}.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than size.
   > this method will construct a new Node object who’s data is the element to be added, and place this Node appropriately into the list.
4. removeAt method
   > Removes the element at the specified index. For example: given the list {1, 2, 3} and an instruction to removeAt(1), the result would be this {1, 3}.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than or equal to size.
5. getAt method
   > Returns the item at the specified index. For example: given the list {1, 2, 3} and an instruction to getAt(1), the return value would be 2.
   > Throws a NoSuchElementException if the specified index is less than 0 or greater than or equal to size.
6. getSize method
   > Returns the number of elements currently stored in the list.
