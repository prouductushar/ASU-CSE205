Write a public abstract class named BankAccount with fields and methods as defined below!

Your BankAccount class must have the following fields:

> a protected field named accountID of type String, initialized to "0000-0000-0000-0000"
> a protected field named interestRate of type double, initialized to 0.0
> a protected field named currentBalance of type int, initialized to 0

Your BankAccount class must have the following methods:

> a public method named credit that takes an int argument and returns a boolean
> a public abstract method named debit that takes an int argument and returns a boolean
> a public method named getBalance that takes no arguments and returns an int
> a public method named getAccountID that takes no arguments and returns an String
> a public method named setAccountID that takes a String argument and returns nothing
> a public method named getInterestRate that takes no arguments and returns a double
> a public method named setInterestRate that takes a double argument and returns nothing
> a public abstract method named applyInterest that takes no arguments and returns nothing
> a public abstract method named accountInfo that takes no arguments and returns a String

Behavior of the Methods

> The credit method should add the argument amount to the currentBalance
> The debit method is abstract so there will be no behavior or method body
> The getBalance method should return the currentBalance
> The getAccountID method should return the accountID
> The setAccountID method should store the argument value in the accountID field
> The getBalance method should return the currentBalance
> The getInterestRate method should return the interestRate
> The setInterestRate method should store the argument amount in the interestRate field
> The applyInterest method is abstract so there will be no behavior or method body
> The accountInfo method is abstract so there will be no behavior or method body

Additional Information:

1. Since this is an abstract class, you will not be able to instantiate any object from it.
2. You are given a TestAccount class that inherits\extends the BankAccount class. you may use this to help with testing your BankAccount class.
3. You are also given a Main class whith a main method where you can write code to test your BankAccount class.
4. All accounts have balance, credit and debit amounts, and fees stored and passed as a number of pennies (int).
5. All debit amounts will be subtracted from the balance, and all credit amounts will be added to the balance.
6. All bank accounts have a non-negative interest rate (0.02 would be a 2% interest rate).
7. The credit method will always return true.
